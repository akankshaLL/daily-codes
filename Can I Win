class Solution {
public:
    bool canIWin(int maxChoosableInteger, int desiredTotal) {
        if (desiredTotal <= 0) {
            return true;
        }
        int sum = (maxChoosableInteger * (maxChoosableInteger + 1)) / 2;
        if (sum < desiredTotal) {
            return false;
        }

        return canWin(maxChoosableInteger, desiredTotal, 0, 0);
    }

private:
    bool canWin(int maxChoosableInteger, int desiredTotal, int currentTotal, int state) {
        if (memo.count(state)) {
            return memo[state];
        }

        for (int i = 1; i <= maxChoosableInteger; ++i) {
            if (!(state & (1 << (i - 1)))) {
                if (currentTotal + i >= desiredTotal) {
                    memo[state] = true;
                    return true;
                }
                if (!canWin(maxChoosableInteger, desiredTotal, currentTotal + i, state | (1 << (i - 1)))) {
                    memo[state] = true;
                    return true;
                }
            }
        }
        
        memo[state] = false;
        return false;
    }

    unordered_map<int, bool> memo;
};
